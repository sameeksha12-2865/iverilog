$date
	Thu Oct 10 18:57:36 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_alu_8bit $end
$var wire 1 ! CarryOut $end
$var wire 8 " ALU_Out [7:0] $end
$var reg 8 # A [7:0] $end
$var reg 3 $ ALU_Sel [2:0] $end
$var reg 8 % B [7:0] $end
$scope module uut $end
$var wire 8 & A [7:0] $end
$var wire 3 ' ALU_Sel [2:0] $end
$var wire 8 ( B [7:0] $end
$var wire 1 ! CarryOut $end
$var wire 8 ) ALU_Out [7:0] $end
$scope module alu0 $end
$var wire 2 * A [1:0] $end
$var wire 3 + ALU_Sel [2:0] $end
$var wire 2 , B [1:0] $end
$var reg 2 - ALU_Out [1:0] $end
$var reg 1 . CarryOut $end
$upscope $end
$scope module alu1 $end
$var wire 2 / A [1:0] $end
$var wire 3 0 ALU_Sel [2:0] $end
$var wire 2 1 B [1:0] $end
$var reg 2 2 ALU_Out [1:0] $end
$var reg 1 3 CarryOut $end
$upscope $end
$scope module alu2 $end
$var wire 2 4 A [1:0] $end
$var wire 3 5 ALU_Sel [2:0] $end
$var wire 2 6 B [1:0] $end
$var reg 2 7 ALU_Out [1:0] $end
$var reg 1 8 CarryOut $end
$upscope $end
$scope module alu3 $end
$var wire 2 9 A [1:0] $end
$var wire 3 : ALU_Sel [2:0] $end
$var wire 2 ; B [1:0] $end
$var reg 2 < ALU_Out [1:0] $end
$var reg 1 = CarryOut $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
0=
b0 <
b0 ;
b0 :
b0 9
08
b0 7
b0 6
b0 5
b0 4
03
b0 2
b0 1
b0 0
b0 /
0.
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
b0 &
b0 %
b0 $
b0 #
b0 "
0!
$end
#10
1.
b1100 "
b1100 )
b11 2
b1 ,
b11 *
b11 /
b1 %
b1 (
b1111 #
b1111 &
#30
0.
b1110 "
b1110 )
b10 -
b1 $
b1 '
b1 +
b1 0
b1 5
b1 :
#50
b0 -
b0 "
b0 )
b0 2
b1 1
b1 6
b1 ;
b10 *
b10 /
b10 4
b10 9
b10 $
b10 '
b10 +
b10 0
b10 5
b10 :
b1010101 %
b1010101 (
b10101010 #
b10101010 &
#70
b11 -
b11 2
b11 7
b11111111 "
b11111111 )
b11 <
b11 $
b11 '
b11 +
b11 0
b11 5
b11 :
#90
b100 $
b100 '
b100 +
b100 0
b100 5
b100 :
#110
