$date
	Thu Sep 05 15:29:36 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var wire 1 ! sum1 $end
$var wire 1 " cout1 $end
$var reg 3 # i1 [2:0] $end
$var reg 1 $ i2 $end
$var integer 32 % i [31:0] $end
$scope module circuit3_0 $end
$var wire 3 & i1 [0:2] $end
$var wire 1 $ i2 $end
$var wire 1 ' x2 $end
$var wire 1 ( x1 $end
$var wire 1 ! sum1 $end
$var wire 1 " cout1 $end
$scope module fa_1 $end
$var wire 1 ) cin $end
$var wire 1 * i0 $end
$var wire 1 + i1 $end
$var wire 1 , t2 $end
$var wire 1 - t1 $end
$var wire 1 . t0 $end
$var wire 1 ( sum $end
$var wire 1 ' cout $end
$scope module _i0 $end
$var wire 1 * i0 $end
$var wire 1 + i1 $end
$var wire 1 ) i2 $end
$var wire 1 / t $end
$var wire 1 ( o $end
$scope module xor2_0 $end
$var wire 1 * i0 $end
$var wire 1 + i1 $end
$var wire 1 / o $end
$upscope $end
$scope module xor2_1 $end
$var wire 1 ) i0 $end
$var wire 1 / i1 $end
$var wire 1 ( o $end
$upscope $end
$upscope $end
$scope module _i1 $end
$var wire 1 * i0 $end
$var wire 1 + i1 $end
$var wire 1 . o $end
$upscope $end
$scope module _i2 $end
$var wire 1 + i0 $end
$var wire 1 ) i1 $end
$var wire 1 - o $end
$upscope $end
$scope module _i3 $end
$var wire 1 ) i0 $end
$var wire 1 * i1 $end
$var wire 1 , o $end
$upscope $end
$scope module _i4 $end
$var wire 1 . i0 $end
$var wire 1 - i1 $end
$var wire 1 , i2 $end
$var wire 1 0 t $end
$var wire 1 ' o $end
$scope module or2_0 $end
$var wire 1 . i0 $end
$var wire 1 - i1 $end
$var wire 1 0 o $end
$upscope $end
$scope module or2_1 $end
$var wire 1 , i0 $end
$var wire 1 0 i1 $end
$var wire 1 ' o $end
$upscope $end
$upscope $end
$upscope $end
$scope module fa_2 $end
$var wire 1 $ cin $end
$var wire 1 ( i0 $end
$var wire 1 ' i1 $end
$var wire 1 1 t2 $end
$var wire 1 2 t1 $end
$var wire 1 3 t0 $end
$var wire 1 ! sum $end
$var wire 1 " cout $end
$scope module _i0 $end
$var wire 1 ( i0 $end
$var wire 1 ' i1 $end
$var wire 1 $ i2 $end
$var wire 1 4 t $end
$var wire 1 ! o $end
$scope module xor2_0 $end
$var wire 1 ( i0 $end
$var wire 1 ' i1 $end
$var wire 1 4 o $end
$upscope $end
$scope module xor2_1 $end
$var wire 1 $ i0 $end
$var wire 1 4 i1 $end
$var wire 1 ! o $end
$upscope $end
$upscope $end
$scope module _i1 $end
$var wire 1 ( i0 $end
$var wire 1 ' i1 $end
$var wire 1 3 o $end
$upscope $end
$scope module _i2 $end
$var wire 1 ' i0 $end
$var wire 1 $ i1 $end
$var wire 1 2 o $end
$upscope $end
$scope module _i3 $end
$var wire 1 $ i0 $end
$var wire 1 ( i1 $end
$var wire 1 1 o $end
$upscope $end
$scope module _i4 $end
$var wire 1 3 i0 $end
$var wire 1 2 i1 $end
$var wire 1 1 i2 $end
$var wire 1 5 t $end
$var wire 1 " o $end
$scope module or2_0 $end
$var wire 1 3 i0 $end
$var wire 1 2 i1 $end
$var wire 1 5 o $end
$upscope $end
$scope module or2_1 $end
$var wire 1 1 i0 $end
$var wire 1 5 i1 $end
$var wire 1 " o $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
05
04
03
02
01
00
0/
0.
0-
0,
0+
0*
0)
0(
0'
b0 &
b0 %
0$
b0 #
0"
0!
$end
#10
b1 %
#20
1"
14
11
1(
1)
0!
b10 %
b1 #
b1 &
1$
#30
14
1/
1(
0"
1+
0)
1!
01
b11 %
b10 #
b10 &
0$
#40
15
12
1'
14
10
0(
1-
1"
1)
0!
01
b100 %
b11 #
b11 &
1$
#50
0'
14
03
00
0"
1(
0-
05
0)
1!
02
b101 %
b10 #
b10 &
0$
#60
15
12
1'
14
10
0(
1-
1"
1)
0!
01
b110 %
b11 #
b11 &
1$
